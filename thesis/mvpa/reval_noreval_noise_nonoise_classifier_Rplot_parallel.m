% This is a parallel version of
% reval_noreval_noise_nonoise_classifier_Rplot.m by mapping SGE_TASK_ID to
% various parameter sets. 
% The range of SGE_TASK_ID is 0~287 and each number corresponds to a
% parameter combination.

%% This is a top-level script
clear all
%% Load Preset Classifiers
load_classifiers;

%% Experiment Parameters
load_aggregation_methods;

%% environment setup
environment_setup;
produce_graphs = 0;
setenv('SGE_MVPA_ONLY', '0')
tid = str2num(getenv('SGE_TASK_ID'));
tid = tid-1 % 0 ~287
id1 = floor(tid/96) + 1; % 1, 2, or 3
tid = tid - (id1-1)*96; % 1~96
id2 = floor(tid/48) + 1; % 1,2
tid = tid - (id2-1)*48; % 1~48
id3= floor(tid/24) + 1; %1,2
tid = tid - (id3-1) * 24; % 1~24
id4 = floor(tid/4) + 1; % 1,2,3,4,5,6
tid = tid - (id4-1)*4; % 1~4
id5 = tid + 1; % 1,2,3,4

%when id1=1, then id2=2 and id3=2
% if loc1, then sTR SHIFT = 3 and TR SELECT = 3
if id1==1 && (id2~=2 || id3~=2)
    return;  
end
%when id4=5 or 6 then id5 = 1
% if ALLPHASE2 or PHASE2NOREST, No pruning.
if (id4==5 || id4==6) && id5~=1
    return;
end
disp([id1 id2 id3 id4 id5]);
%% Tweakable Parameters
aggregation_methods = aggregation_methods(1:8);
classifiers = classifiers(1:30);
LOCALIZER_OPTIONS = {'1', '2', '12'};%, '21'};
TRSHIFT_OPTIONS = {'2','3'};
TRSELECT_OPTIONS = {'2','3'};
DATARANGE_OPTIONS = {'REST', 'MINIREST1', 'MINIREST2', 'MINIREST3', 'ALLPHASE2', 'PHASE2NOREST', };
DATA_PRUNING_OPTIONS = {'','REST_TRUNCATE_1', 'REST_TRIM_5', 'REST_TRIM_AND_TRUNCATE'};

setenv('SGE_LOCALIZER', LOCALIZER_OPTIONS{id1}); % required, choices: 1, 2, 12, 21
setenv('SGE_ROI', 'FFA_PPA'); % required, choices: FFA_PPA
setenv('LOC2TRSHIFT', TRSHIFT_OPTIONS{id2}) % optional, default:3, choices: 2, 3
setenv('LOC2TR', TRSELECT_OPTIONS{id3}); % optional, default:'3', choices: 2, 3
setenv('SGE_DATARANGE', DATARANGE_OPTIONS{id4}); % required, choices: REST, MINIREST1, MINIREST2, MINIREST3,  ALLPHASE2, PHASE2NOREST,
setenv('SGE_DATA_PRUNING', DATA_PRUNING_OPTIONS{id5}); % optional, default: '', choices: 'REST_TRUNCATE_1', 'REST_TRIM_5', 'REST_TRIM_AND_TRUNCATE'
setenv('SGE_DATAPATH', '/usr/people/erhee/thesis/mvpa'); % optional
paramStr = sprintf('%s_%s_%s_%s_%s_%s', getenv('SGE_LOCALIZER'), getenv('SGE_ROI'), getenv('LOC2TRSHIFT'), getenv('LOC2TR'), getenv('SGE_DATARANGE'), getenv('SGE_DATA_PRUNING'));
disp(paramStr);
for classifier_index = 1:numel(classifiers)
    for aggregation_index = 1:numel(aggregation_methods)
        classifiers{classifier_index}
        aggregation_method = aggregation_methods{aggregation_index};
        class_args = classifiers{classifier_index};
        setenv('SGE_GRAPH_ID', num2str((classifier_index - 1) * numel(aggregation_methods) + aggregation_index));
        setenv('SGE_AGG', aggregation_method);
        setenv('SGE_CLASSIFIER_ID', num2str(classifier_index));
        if isempty(getenv('SGE_LOCALIZER'))
            setenv('SGE_LOCALIZER', num2str(1)); % change for localizer. 1 = loc1, 2 = loc2, 12 = loc1&2(jointly trained) 21 = loc1&2(independently trained)
        end
        if isempty(getenv('SGE_ROI'))
            setenv('SGE_ROI', 'FFA_PPA'); % change for mask
        end
        if isempty(getenv('SGE_DATARANGE'))
            setenv('SGE_DATARANGE', 'REST');
        end
        clear validFMRIMeasure;
        replanning_behavioralVSfMRI_FFAPPA;
        %% {[No Noise] [No Reval]},     {[No Noise] [Reval]},     {[Noise] [No Reval]},     {[Noise Reval]}
        %% Reval VS No Reval 
        revalFMRIMean    = [ mean(validFMRIMeasure(:,   [1 3]) , 2) mean(validFMRIMeasure(:,   [2 4]) , 2) ];
        revalBehavioralMean  = [ mean(validBehavioralMeasure(:, [1 3]) , 2) mean(validBehavioralMeasure(:, [2 4]) , 2) ];
        [RHO_NoReval,PVAL_NoReval] = corr(revalFMRIMean(:,1), revalBehavioralMean(:, 1), 'type', 'Spearman' , 'tail', 'right');
        [RHO_Reval,PVAL_Reval] = corr(revalFMRIMean(:,2), revalBehavioralMean(:, 2), 'type', 'Spearman' , 'tail', 'left');
        reval_rhos(aggregation_index, classifier_index) = RHO_Reval;
        noreval_rhos(aggregation_index, classifier_index) = RHO_NoReval;
        reval_pvals(aggregation_index, classifier_index) = PVAL_Reval;
        noreval_pvals(aggregation_index, classifier_index) = PVAL_NoReval;

        %% Noise VS No Noise
        noiseFMRIMean    = [ mean(validFMRIMeasure(:,   [1 2]) , 2) mean(validFMRIMeasure(:,   [3 4]) , 2) ];
        noiseBehavioralMean  = [ mean(validBehavioralMeasure(:, [1 2]) , 2) mean(validBehavioralMeasure(:, [3 4]) , 2) ];
        [RHO_NoNoise,PVAL_NoNoise] = corr(noiseFMRIMean(:,1), noiseBehavioralMean(:, 1), 'type', 'Spearman' , 'tail', 'right');
        [RHO_Noise,PVAL_Noise] = corr(noiseFMRIMean(:,2), noiseBehavioralMean(:, 2), 'type', 'Spearman' , 'tail', 'left');
        noise_rhos(aggregation_index, classifier_index) = RHO_Noise;
        nonoise_rhos(aggregation_index, classifier_index) = RHO_NoNoise;
        noise_pvals(aggregation_index, classifier_index) = PVAL_Noise;
        nonoise_pvals(aggregation_index, classifier_index) = PVAL_NoNoise;

    end
end
for classifier_index = 1:numel(classifiers)
    classifier = classifiers{classifier_index};
    classifier_names{classifier_index} = regexprep(regexprep(classifier.train_funct_name,'train_',''),'_',' ');
end
unique_classes = unique(classifier_names);

%% Prepare Variables for Graph Title
param_localizer = getenv('SGE_LOCALIZER');
param_mask = getenv('SGE_ROI');
param_datarange = getenv('SGE_DATARANGE');
param_datapruning = getenv('SGE_DATA_PRUNING');

%% This is creating the Reval VS NoReval Graph
rhoFigure = figure('Color', [1 1 1], 'Position', [100, 100, 800, 800]);
hold on;
markers = {'o','*','+','d','s','^','p','h','.'}; % supports up to 8 aggregation methods for now; add more markers to support more.
markerSize = [10, 10, 10, 10, 10, 10, 10, 10, 10]; % supports up to 6 aggregation methods for now; add more to support more.
colors = ['b' 'g' 'r' 'c' 'm' 'y' 'k','w'];  % supports up to 8 aggregation methods

gscatter([reval_rhos(aggregation_index,:) zeros(1,numel(aggregation_methods))] - 5 , [noreval_rhos(aggregation_index,:) zeros(1,numel(aggregation_methods))] - 5 , [classifier_names'; regexprep(aggregation_methods','_', ' ')], [colors(1:numel(unique_classes)) repmat('k',1,numel(aggregation_methods))], [repmat('.',1,numel(unique_classes)), cell2mat(markers(1:numel(aggregation_methods)))], [repmat(30,1,numel(unique_classes)), repmat(10, 1, numel(aggregation_methods))]);
for aggregation_index = 1:numel(aggregation_methods)
    gscatter(reval_rhos(aggregation_index,:) , noreval_rhos(aggregation_index,:), classifier_names', colors, markers{aggregation_index}, markerSize(aggregation_index), 'off', 'S2XS1 Reval R', 'S2XS1 No Reval R');
    aggregation_methods(aggregation_index);
    reval_rho_pval = [reval_rhos(aggregation_index,:);reval_pvals(aggregation_index,:)];
    noreval_rho_pval = [noreval_rhos(aggregation_index,:);noreval_pvals(aggregation_index,:)];
end
title(sprintf('Reval VS No Reval, Localizer:%s, Mask:%s, TestData:%s %s', param_localizer, regexprep(param_mask,'_',''), param_datarange, regexprep(param_datapruning,'_',' ')));
% draw axes

axis([-1 1 -1 1]);
plot([-1 1], [0, 0], '--k');
plot([0 0], [-1 1], '--k')
grid on
saveFigure(sprintf('/usr/people/erhee/thesis/mvpa/figures/metaplots/[%s]_%s_R.fig',getenv('SGE_TASK_ID'),paramStr));
%% This is creating the Noise VS No Noise Graph
rhoFigure = figure('Color', [1 1 1], 'Position', [100, 100, 800, 800]);
hold on;
markers = {'o','*','+','d','s','^','p','h','.'}; % supports up to 8 aggregation methods for now; add more markers to support more.
markerSize = repmat(10, 1, numel(aggregation_methods));
colors = ['b' 'g' 'r' 'c' 'm' 'y' 'k','w'];  % supports up to 8 aggregation methods

gscatter([noise_rhos(aggregation_index,:) zeros(1,numel(aggregation_methods))] - 5 , [nonoise_rhos(aggregation_index,:) zeros(1,numel(aggregation_methods))] - 5 , [classifier_names'; regexprep(aggregation_methods','_', ' ')], [colors(1:numel(unique_classes)) repmat('k',1,numel(aggregation_methods))], [repmat('.',1,numel(unique_classes)), cell2mat(markers(1:numel(aggregation_methods)))], [repmat(30,1,numel(unique_classes)), repmat(10, 1, numel(aggregation_methods))]);
for aggregation_index = 1:numel(aggregation_methods)
    gscatter(noise_rhos(aggregation_index,:) , nonoise_rhos(aggregation_index,:), classifier_names', colors, markers{aggregation_index}, markerSize(aggregation_index), 'off', 'S2XS1 Noise R', 'S2XS1 No Noise R');
end
title(sprintf('Noise VS No Noise, Localizer:%s, Mask:%s, TestData:%s %s', param_localizer, regexprep(param_mask,'_',''), param_datarange, regexprep(param_datapruning,'_',' ')));


axis([-1 1 -1 1]);
plot([-1 1], [0, 0], '--k');
plot([0 0], [-1 1], '--k')
grid on;
saveFigure(sprintf('/usr/people/erhee/thesis/mvpa/figures/metaplots/[%s]_%s_N.fig',getenv('SGE_TASK_ID'),paramStr));
outFile = fopen(sprintf('/usr/people/erhee/thesis/mvpa/data_for_spreadsheet/[%s]_%s.txt',getenv('SGE_TASK_ID'), paramStr),'w');
RlinearOutput = [];
PlinearOutput = [];
tid = str2num(getenv('SGE_TASK_ID'));
 classifier_names = {'Logistic Regression',...
    'Logistic Regression',...
    'Logistic Regression',...
    'Logistic Regression',...
    'Logistic Regression',...
    'Logistic Regression',...
    'Logistic Regression',...
    'Logistic Regression',...
    'SVM',...
    'SVM',...
    'SVM',...
    'SVM',...
    'SVM',...
    'SVM',...
    'SVM',...
    'SVM',...
    'SVM',...
    'SVM',...
    'SVM',...
    'SVM',...
    'SVM',...
    'SVM',...
    'SVM',...
    'SVM',...
    'Back Propagation',...
    'Back Propagation',...
    'Random Forest',...
    'Random Forest',...
    'Adaboost',...
    'Adaboost'};
 classifier_params = {'Penalty = 1',...
'Penalty = 5',...
'Penalty = 10',...
'Penalty = 15',...
'Penalty = 20',...
'Penalty = 30',...
'Penalty = 50',...
'Penalty = 100',...
'Kernel = LINEAR, Penality = 1',...
'Kernel = LINEAR, Penality = 5',...
'Kernel = LINEAR, Penality = 10',...
'Kernel = LINEAR, Penality = 50',...
'Kernel = POLY, Penality = 1',...
'Kernel = POLY, Penality = 5',...
'Kernel = POLY, Penality = 10',...
'Kernel = POLY, Penality = 50',...
'Kernel = RBF, Penality = 1',...
'Kernel = RBF, Penality = 5',...
'Kernel = RBF, Penality = 10',...
'Kernel = RBF, Penality = 50',...
'Kernel = SIGMOID, Penality = 1',...
'Kernel = SIGMOID, Penality = 5',...
'Kernel = SIGMOID, Penality = 10',...
'Kernel = SIGMOID, Penality = 50',...
'Hidden Nodes = 10',...
'Hidden Nodes = 30',...
'Trees = 500',...
'Trees = 1K',...
'Trees = 500',...
'Trees = 1K'};
dataselectors = {'1~15','1~14', '6~15', '6~14'};
localizer_ascii = {'1','2','1&2'};
for classifier_index = 1:numel(classifiers)
    for aggregation_index = 1:numel(aggregation_methods)
        gid = (classifier_index - 1) * numel(aggregation_methods) + aggregation_index;
        RlinearOutput(end+1:end+4) = [reval_rhos(aggregation_index, classifier_index),  noreval_rhos(aggregation_index, classifier_index),  noise_rhos(aggregation_index, classifier_index),  nonoise_rhos(aggregation_index, classifier_index)];
        PlinearOutput(end+1:end+4) = [reval_pvals(aggregation_index, classifier_index), noreval_pvals(aggregation_index, classifier_index), noise_pvals(aggregation_index, classifier_index), nonoise_pvals(aggregation_index, classifier_index)];
        figurename = sprintf('[%d]_[%d]_R.fig',tid, gid);
        
        fprintf(outFile,sprintf('%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%f\t%f\t%s\n',...
            localizer_ascii{id1},...
            'FACE & SCENE',...
            TRSHIFT_OPTIONS{id2},...
            TRSELECT_OPTIONS{id3},...
            DATARANGE_OPTIONS{id4},...
            dataselectors{id5},...
            classifier_names{classifier_index},...
            classifier_params{classifier_index},...
            aggregation_methods{aggregation_index},...
            'P3-P1',...
            'Reval',...
            'Mean(Reval1, Reval2)',...
            'Mean(Reval1, Reval2)',...
            reval_rhos(aggregation_index, classifier_index),...
            reval_pvals(aggregation_index, classifier_index),...
            figurename));
        fprintf(outFile,sprintf('%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%f\t%f\t%s\n',...
            localizer_ascii{id1},...
            'FACE & SCENE',...
            TRSHIFT_OPTIONS{id2},...
            TRSELECT_OPTIONS{id3},...
            DATARANGE_OPTIONS{id4},...
            dataselectors{id5},...
            classifier_names{classifier_index},...
            classifier_params{classifier_index},...
            aggregation_methods{aggregation_index},...
            'P3-P1',...
            'No Reval',...
            'Mean(No Reval1, No Reval2)',...
            'Mean(No Reval1, No Reval2)',...
            noreval_rhos(aggregation_index, classifier_index),...
            noreval_pvals(aggregation_index, classifier_index),...
            figurename));
        figurename = sprintf('[%d]_[%d]_N.fig',tid, gid);
        fprintf(outFile,sprintf('%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%f\t%f\t%s\n',...
            localizer_ascii{id1},...
            'FACE & SCENE',...
            TRSHIFT_OPTIONS{id2},...
            TRSELECT_OPTIONS{id3},...
            DATARANGE_OPTIONS{id4},...
            dataselectors{id5},...
            classifier_names{classifier_index},...
            classifier_params{classifier_index},...
            aggregation_methods{aggregation_index},...
            'P3-P1',...
            'Noise',...
            'Mean(Noise1, Noise2)',...
            'Mean(Noise1, Noise2)',...
            noise_rhos(aggregation_index, classifier_index),...
            noise_pvals(aggregation_index, classifier_index),...
            figurename));
        fprintf(outFile,sprintf('%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%f\t%f\t%s\n',...
            localizer_ascii{id1},...
            'FACE & SCENE',...
            TRSHIFT_OPTIONS{id2},...
            TRSELECT_OPTIONS{id3},...
            DATARANGE_OPTIONS{id4},...
            dataselectors{id5},...
            classifier_names{classifier_index},...
            classifier_params{classifier_index},...
            aggregation_methods{aggregation_index},...
            'P3-P1',...
            'No Noise',...
            'Mean(No Noise1, No Noise 2)',...
            'Mean(No Noise1, No Noise 2)',...
            nonoise_rhos(aggregation_index, classifier_index),...
            nonoise_pvals(aggregation_index, classifier_index),...
            figurename));
    end
end

save(sprintf('/usr/people/erhee/thesis/mvpa/data_for_spreadsheet/[%s]_%s_RValues.mat',getenv('SGE_TASK_ID'),paramStr), 'RlinearOutput');
save(sprintf('/usr/people/erhee/thesis/mvpa/data_for_spreadsheet/[%s]_%s_PValues.mat',getenv('SGE_TASK_ID'),paramStr), 'PlinearOutput');
